/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { RangeSliderChangeEvent } from "./components/range-slider-touch/range-slider-touch";
export { RangeSliderChangeEvent } from "./components/range-slider-touch/range-slider-touch";
export namespace Components {
    interface RangeSliderTouch {
        "disabled"?: boolean;
        "max": number;
        "min": number;
        /**
          * Specifies the value granularity.
         */
        "step": number;
        /**
          * Long press time in milliseconds.
         */
        "time": number;
        "value": number;
    }
}
export interface RangeSliderTouchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRangeSliderTouchElement;
}
declare global {
    interface HTMLRangeSliderTouchElementEventMap {
        "input": RangeSliderChangeEvent;
        "change": RangeSliderChangeEvent;
    }
    interface HTMLRangeSliderTouchElement extends Components.RangeSliderTouch, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRangeSliderTouchElementEventMap>(type: K, listener: (this: HTMLRangeSliderTouchElement, ev: RangeSliderTouchCustomEvent<HTMLRangeSliderTouchElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRangeSliderTouchElementEventMap>(type: K, listener: (this: HTMLRangeSliderTouchElement, ev: RangeSliderTouchCustomEvent<HTMLRangeSliderTouchElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRangeSliderTouchElement: {
        prototype: HTMLRangeSliderTouchElement;
        new (): HTMLRangeSliderTouchElement;
    };
    interface HTMLElementTagNameMap {
        "range-slider-touch": HTMLRangeSliderTouchElement;
    }
}
declare namespace LocalJSX {
    interface RangeSliderTouch {
        "disabled"?: boolean;
        "max"?: number;
        "min"?: number;
        /**
          * Emits value only on release and changed.
         */
        "onChange"?: (event: RangeSliderTouchCustomEvent<RangeSliderChangeEvent>) => void;
        /**
          * Emits value on move, press and release.
         */
        "onInput"?: (event: RangeSliderTouchCustomEvent<RangeSliderChangeEvent>) => void;
        /**
          * Specifies the value granularity.
         */
        "step"?: number;
        /**
          * Long press time in milliseconds.
         */
        "time"?: number;
        "value"?: number;
    }
    interface IntrinsicElements {
        "range-slider-touch": RangeSliderTouch;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "range-slider-touch": LocalJSX.RangeSliderTouch & JSXBase.HTMLAttributes<HTMLRangeSliderTouchElement>;
        }
    }
}
